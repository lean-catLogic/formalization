import categoryTheory.thin
universes v u u‚ÇÇ v‚ÇÇ
open category_theory

namespace specialCats

set_option pp.structure_projections false

class FP_cat (C : Type u) extends category C :=
  -- Terminal object
  (unit : C) 
  (term : ‚àÄ X : C, X ‚ü∂ unit) 
  (unit_Œ∑ : ‚àÄ (X : C) (f : X ‚ü∂ unit), f = term X)
  -- Binary products
  (prod : C ‚Üí C ‚Üí C)
  (pr1 : ‚àÄ {X Y : C}, (prod X Y) ‚ü∂ X)
  (pr2 : ‚àÄ {X Y : C}, (prod X Y) ‚ü∂ Y)
  (pair : ‚àÄ {X Y Z : C} (f : Z ‚ü∂ X) (g : Z ‚ü∂ Y), Z ‚ü∂ (prod X Y))
  (prod_Œ≤1 : ‚àÄ {X Y Z : C} {f : Z ‚ü∂ X} {g : Z ‚ü∂ Y}, (pair f g) ‚â´ pr1 = f)
  (prod_Œ≤2 : ‚àÄ {X Y Z : C} {f : Z ‚ü∂ X} {g : Z ‚ü∂ Y}, (pair f g) ‚â´ pr2 = g)
  (prod_Œ∑ : ‚àÄ {X Y : C}, pair pr1 pr2 = ùüô (prod X Y))

instance {C : Type u} [FP_cat C] : has_one C := 
{
    one := FP_cat.unit
}
instance {C : Type u} [FP_cat C] : has_mul C := 
{
    mul := Œª X Y, FP_cat.prod X Y
}

def homprod {C : Type u} [FP_cat C] {W X Y Z : C}
   (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) : W * Y ‚ü∂ X * Z :=
   FP_cat.pair (FP_cat.pr1 ‚â´ f) (FP_cat.pr2 ‚â´ g)
notation (name:=homprod) f `***` g := homprod f g 

-- #check category

class CC_cat (C : Type u) extends FP_cat C := 
  (exp : C ‚Üí C ‚Üí C)
  (eval : ‚àÄ {Y Z : C}, (exp Y Z) * Y ‚ü∂ Z)
  (curry : ‚àÄ {X Y Z : C}, (X * Y ‚ü∂ Z) ‚Üí (X ‚ü∂ (exp Y Z)))
  (curry_Œ≤ : ‚àÄ {X Y Z : C} (u : X * Y ‚ü∂ Z), ((curry u) *** ùüô Y) ‚â´ eval = u)
  (curry_Œ∑ : ‚àÄ {X Y Z : C} (v : X ‚ü∂ (exp Y Z)), curry((v *** ùüô Y) ‚â´ eval) = v)

notation (name:=exp) X `‚üπ` Y := CC_cat.exp X Y


end specialCats


namespace downsetCCC

open specialCats

class downsets (P : Type) [partial_order P] : Type :=
  (X : set P)
  (down_closed : ‚àÄ (x x' : P), x ‚â§ x' ‚Üí x' ‚àà X ‚Üí x ‚àà X)

instance {P : Type}[partial_order P] : has_subset (downsets P) :=
{
  subset := Œª A B, ‚àÄ (x ‚àà A.X), x ‚àà B.X
}

theorem downset_ext {P : Type} [partial_order P] : ‚àÄ {A B : downsets P}, A.X = B.X ‚Üí A=B
| ‚ü®_,_‚ü© ‚ü®_,_‚ü© rfl := rfl


instance {P : Type}[partial_order P] : has_mem P (downsets P) :=
{
 mem := Œª x ‚ü®A,A_down‚ü©, x ‚àà A
}
def down_closed_external {P : Type}[partial_order P] : 
  ‚àÄ (X : downsets P) (x x' : P), x ‚â§ x' ‚Üí x' ‚àà X ‚Üí x ‚àà X :=
begin
  assume X x x' xlex' x'inX,
  cases X with A A_down,
  apply A_down,
  exact xlex',
  exact x'inX,
end

instance {P : Type}[partial_order P] : has_inter (downsets P) :=
{
  inter := Œª ‚ü® A, A_down ‚ü© ‚ü® B, B_down ‚ü©, ‚ü® A ‚à© B ,
  begin
      assume x x' h x'inboth,
      cases x'inboth with inA inB,
      constructor,
      apply A_down,
      exact h,
      exact inA,
      apply B_down,
      exact h,
      exact inB,
  end ‚ü©
}

#check downset_ext
def down {P : Type} (P_struct : partial_order P) : partial_order (downsets P) :=
{
  le := (‚äÜ),
  le_refl := Œª A x h, h,
  le_antisymm := begin 
                  assume A B h1 h2,
                  apply downset_ext,
                  apply set.ext,
                  assume x,
                  constructor,
                  apply h1,
                  apply h2,
                 end,
  le_trans := Œª ‚ü®A,_‚ü© ‚ü®B,_‚ü© ‚ü®C,_‚ü© h1 h2 x h, 
            begin apply h2, apply h1, exact h end
}
def down_pre {P : Type} [P_struct : partial_order P] : preorder (downsets P) :=
(@partial_order.to_preorder (downsets P) (down P_struct))

instance {P : Type} [partial_order P] : thin_cat (downsets P) :=
  thin_cat.from_preorder down_pre

def downset_embed {P : Type} [P_struct : partial_order P]: P ‚Üí downsets P := 
Œª p, ‚ü® { x ‚àà set.univ | x ‚â§ p } ,
  begin 
    assume x x' xlex' h',
    dsimp,
    constructor, constructor,
    dsimp at h', cases h' with _ h,
    apply le_trans,
    exact xlex',
    exact h,
  end
 ‚ü©

def down_exp{P : Type} [P_struct : partial_order P] (X Y : downsets P) : downsets P :=
‚ü®{ x ‚àà set.univ | ‚àÄ (z : P), z‚â§x ‚àß z‚ààX ‚Üí z‚ààY },
  begin 
    assume x x' xlex' h',
    dsimp at h', cases h' with _ h',
    dsimp, constructor, constructor,
    assume z h,
    cases h with zlex zinX,
    apply h',
    constructor,
    apply le_trans, exact zlex, exact xlex',
    exact zinX,
  end
‚ü©

instance {P : Type} [P_struct : partial_order P] : CC_cat (downsets P) :=
{
  unit := ‚ü® set.univ , Œª x x' _ _, true.intro ‚ü© ,
  term := 
    begin 
      assume X,
      induction X with A A_down,
      apply hom_of_le,
      assume x,
      assume h,
      constructor,
    end,
  unit_Œ∑ := Œª X f, by apply thin_cat.K,
  prod := (‚à©), 
  pr1 :=
    begin 
      assume X Y,
      cases X with A A_down,
      cases Y with B B_down,
      apply hom_of_le,
      assume x h,
      cases h,
      exact h_left,
    end,
  pr2 :=
    begin 
      assume X Y,
      cases X with A A_down,
      cases Y with B B_down,
      apply hom_of_le,
      assume x h,
      cases h,
      exact h_right,
    end,
  pair := 
    begin 
      assume X Y Z,
      assume F G,
      have k : @partial_order.le (downsets P) (down P_struct) Z X,
      apply @le_of_hom (downsets P) (down_pre) Z X,
      exact F,
      have l : @partial_order.le (downsets P) (down P_struct) Z Y,
      apply @le_of_hom (downsets P) (down_pre) Z Y,
      exact G,
      cases X with A A_down,
      cases Y with B B_down,
      cases Z with C C_down,
      apply hom_of_le,
      assume z h,
      constructor,
      apply k, assumption,
      apply l, assumption,
    end,
  prod_Œ≤1 := Œª X Y Z f g, by apply thin_cat.K,
  prod_Œ≤2 := Œª X Y Z f g, by apply thin_cat.K,
  prod_Œ∑ := Œª X Y, by apply thin_cat.K,
  exp := down_exp,
  eval := 
    begin 
      assume X Y,
      cases X with A A_down,
      cases Y with B B_down,
      apply hom_of_le,
      assume z h,
      cases h with zin_exp zin_A,
      dsimp at zin_exp,
      cases zin_exp with _ property,
      apply property,
      constructor,
      apply le_refl,
      exact zin_A,
    end,
  curry := 
    begin 
      assume X Y Z XYleZ,
      suffices betterXYleZ : X ‚à© Y ‚äÜ Z,
      cases X with A A_down,
      cases Y with B B_down,
      cases Z with C C_down,
      apply hom_of_le,
      assume z zinA,
      dsimp[down_exp], constructor, constructor,
      assume z',
      assume h, cases h with z'lez z'inB,
      have z'inA : z'‚ààA,
      apply A_down,
      exact z'lez,
      exact zinA,
      suffices ABleC : A ‚à© B ‚äÜ C,
      apply ABleC,
      constructor,
      exact z'inA, exact z'inB,
      apply betterXYleZ,
      apply @le_of_hom (downsets P) (down_pre),
      exact XYleZ,
    end,
  curry_Œ≤ := Œª X Y Z u, by apply thin_cat.K,
  curry_Œ∑ := Œª X Y Z v, by apply thin_cat.K
}


end downsetCCC
